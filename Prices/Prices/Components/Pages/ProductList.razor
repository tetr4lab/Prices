@inherits ItemListBase<Product>

@page "/products"

<PageTitle>Prices Products</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (!DataSet.IsReady || items == null) {
    <MudProgressCircular Indeterminate="true" />
} else {
    if (items.Count > 0) {
        <MudTable Items="items" Dense Hover Striped Breakpoint="Breakpoint.Xs" @ref="_table"
        Filter="new Func<Product, bool> (FilterFunc)"
        SortLabel="⇅"
        AllowUnsorted="true"
        @bind-SelectedItem="selectedItem"
        CommitEditTooltip="保存"
        CancelEditTooltip="取消"
        RowEditPreview="Edit"
        RowEditCancel="Cancel"
        RowEditCommit="Commit"
        FooterClass="mud-background-gray"
        ReadOnly="false"
        CanCancelEdit="true"
        IsEditRowSwitchingBlocked="true"
        ApplyButtonPosition="TableApplyButtonPosition.End"
        EditButtonPosition="TableEditButtonPosition.End"
        EditTrigger="TableEditTrigger.EditButton">
            <HeaderContent>
                <MudTh Style="width: 8em;"><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Product, object>(x=>x.Priority ?? 0)"><MudIcon Icon="@Icons.Material.Outlined.Sort" Size="Size.Small" /></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Product, string?>(x=>x.Category (DataSet)?.Name)">@(Product.Label [nameof (Product.CategoryId)])</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Product, string?>(x=>x.Name)">@(Product.Label [nameof (Product.Name)])</MudTableSortLabel></MudTh>
                <MudTh>@(Product.Label[nameof(Product.Image)])</MudTh>
                <MudTh Style="width: 8em;"><MudTableSortLabel SortBy="new Func<Product, string?>(x=>x.Unit)">@(Product.Label[nameof(Product.Unit)])</MudTableSortLabel></MudTh>
                <MudTh>@(Product.Label [nameof (Product.Remarks)])</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class="align-right text-nowrap" DataLabel="@(Product.Label[nameof(Product.Priority)])">
                    <MudStack Row>
                        <MudTooltip Text="価格を一覧" Duration="1000">
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.PriceChange" Class="pa-0" OnClick="@(async () => { await SetFilterText.InvokeAsync ($"p{context.Id}."); NavManager.NavigateTo ("./"); })" />
                        </MudTooltip>
                        <MudSpacer />
                        @context.Priority
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.CategoryId)])">@(context.Category (DataSet)?.Name)</MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.Name)])">@(context.Name)</MudTd>
                <MudTd Class="pa-0" Style="width:80px;" DataLabel="@(Product.Label[nameof(Product.Image)])">
                    @if (context.Image is not null) {
                        <MudImage Width="80" Height="80" ObjectFit="ObjectFit.Cover" Src="@($"data:image/jpeg;base64,{Convert.ToBase64String (context.Image)}")" />
                    }
                </MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.Unit)])">@(context.Unit)</MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.Remarks)])">@context.Remarks</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd Class="align-right text-nowrap" DataLabel="@(Product.Label[nameof(Product.Priority)])">
                    @{var disable = context.ReferenceCount (DataSet) > 0;}
                    <MudStack Row Class="align-center">
                        <MudTooltip Text="@(disable ? "使用中につき削除不可" : "削除")" Duration="1000">
                            <MudIconButton Disabled="@(disable)" Size="Size.Small" Icon="@Icons.Material.Outlined.DeleteForever" Class="pa-0" OnClick="() => DeleteItem (context)" />
                        </MudTooltip>
                        <MudNumericField Typo="Typo.body2" T="int?" Min="0" Max="99" HideSpinButtons="true" @bind-value="context.Priority" />
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.CategoryId)])">
                    <MudSelect T="long" Clearable="false" @bind-Value="context.CategoryId">
                        @foreach (var category in DataSet.GetList<Category> ()) {
                            <MudSelectItem Value="category.Id">@(category.Name)</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.Name)])">
                    <MudTextField Margin="Margin.None" Typo="Typo.body2" T="string" @bind-Value="context.Name" Required />
                </MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.Image)])">
                    <MudFileUpload T="IBrowserFile" Accept=".jpg, .jpeg, .png" FilesChanged="file => UploadFileAsync (file, context)">
                        <ActivatorContent>
                            <MudButton Color="Color.Tertiary" Disabled="@(isUploading)" Variant="Variant.Outlined" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload">
                                @if (context.Image is null) {
                                    @("Image")
                                } else {
                                    <MudImage Width="80" Height="80" ObjectFit="ObjectFit.Cover" Src="@($"data:image/jpeg;base64,{Convert.ToBase64String (context.Image)}")" />
                                }
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>
                    @if (context.Image is not null) {
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.DeleteForever" OnClick="() => DeleteFile (context)" />
                    }
                </MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.Unit)])">
                    <MudTextField Margin="Margin.None" Typo="Typo.body2" T="string" @bind-Value="context.Unit" />
                </MudTd>
                <MudTd DataLabel="@(Product.Label[nameof(Product.Remarks)])">
                    <MudTextField Margin="Margin.None" Typo="Typo.body2" T="string" @bind-Value="context.Remarks" />
                </MudTd>
            </RowEditingTemplate>
            <FooterContent>
                <MudTd>
                    <MudTooltip Text="全ての価格を一覧" Duration="1000">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.PriceChange" Class="pa-0" OnClick="@(() => FilterAndNavigate ("p", "./"))" />
                    </MudTooltip>
                </MudTd>
                <MudTd>
                    <MudSelect Class="align-left" Typo="Typo.body2" T="long" Clearable="false" @bind-Value="newItem.CategoryId">
                        @foreach (var category in DataSet.GetList<Category> ()) {
                            <MudSelectItem Value="category.Id">@(category.Name)</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudTextField Margin="Margin.None" Typo="Typo.body2" T="string" @bind-Value="newItem.Name" />
                </MudTd>
                <MudTd></MudTd>
                <MudTd>
                    <MudTextField Margin="Margin.None" Typo="Typo.body2" T="string" @bind-Value="newItem.Unit" />
                </MudTd>
                <MudTd Class="pr-0">
                    <MudStack Row>
                        <MudTextField Margin="Margin.None" Typo="Typo.body2" T="string" @bind-Value="newItem.Remarks" />
                        <MudTooltip Text="@($"{Product.TableLabel}を追加")" Duration="1000">
                            <MudIconButton Size="Size.Small" Disabled="@(isAdding || !PricesDataSet.EntityIsValid (newItem))" OnClick="AddItem" Icon="@Icons.Material.Outlined.Add" />
                        </MudTooltip>
                    </MudStack>
                </MudTd>
            </FooterContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="_pageSizeOptions" InfoFormat="{first_item}-{last_item} / {all_items}" RowsPerPageString="行/頁:" />
            </PagerContent>
            <EditButtonContent Context="button">
                <MudTooltip Text="編集" Duration="1000">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
                </MudTooltip>
            </EditButtonContent>
        </MudTable>
        <MudText Class="mt-2" Typo="Typo.body2" Color="Color.Success">@(DataSet.Valid ? "validated" : "")</MudText>
        <MudToolBar Dense Class="mb-2">
            @*hidden spacer*@
        </MudToolBar>
    } else {
        <MudText>No items found.</MudText>
    }
}

@code {
    /// <summary>新規生成用アイテムの生成 最初のカテゴリをデフォルトに使用</summary>
    protected override Product NewEditItem => new Product { CategoryId = DataSet.GetList<Category> ().Count > 0 ? DataSet.GetList<Category> () [0].Id : 0 };

    /// <inheritdoc/>
    protected override async Task AddItem () {
        await base.AddItem ();
        if (lastCreatedId > 0) {
            var price = new Price (DataSet, lastCreatedId);
            var result = await DataSet.AddAsync (price);
            if (result.IsSuccess) {
                await DataSet.LoadAsync ();
                Snackbar.Add ($"製品の価格を追加しました。", Severity.Success);
            } else {
                Snackbar.Add ($"製品の価格を追加できませんでした。", Severity.Error);
            }
        }
    }

    /// <summary>画像サイズ制限</summary>
    protected const int MAX_ALLOWED_IMAGE_SIZE = 1024 * 1024 * 10;

    /// <summary>アップロード中</summary>
    protected bool isUploading = false;

    /// <summary>画像のアップロード</summary>
    protected async void UploadFileAsync(IBrowserFile file, Product item) {
        if (isUploading || file == null) { return; }
        isUploading = true;
        try {
            using (var fs = file.OpenReadStream(MAX_ALLOWED_IMAGE_SIZE))
            using (var ms = new MemoryStream()) {
                await fs.CopyToAsync(ms);
                item.Image = ms.ToArray();
            }
        }
        catch (System.IO.IOException ex) {
            if (ex.Message.Contains("exceeds the maximum of")) {
                Snackbar.Add($"ファイルサイズが大きすぎます。(Max {MAX_ALLOWED_IMAGE_SIZE:#,0}byte)");
            } else {
                throw;
            }
        }
        isUploading = false;
        StateHasChanged ();
        return;
    }

    /// <summary>画像の抹消</summary>
    protected void DeleteFile (Product item) {
        item.Image = null;
        StateHasChanged ();
    }

}
