@using System.ComponentModel;

@inherits PricesComponentBase
@implements IDisposable

@page "/"

@inject IAuthorizationService AuthorizationService
@inject PricesDataSet DataSet

<PageTitle>Prices</PageTitle>

@switch (AppModeManager.CurrentMode) {
    case AppMode.Boot:
        if (!AppLockState.IsLocked) {
            AppLockState.Lock ("Loading...");
        }
        break;
    case AppMode.Prices:
        <PriceList />
        break;
    case AppMode.Products:
        <ProductList />
        break;
    case AppMode.Categories:
        <CategoryList />
        break;
    case AppMode.Stores:
        <StoreList />
        break;
    default:
        break;
}

@code {
    /// <inheritdoc/>
    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (firstRender && !DataSet.IsInitialized && !DataSet.IsInitializeStarted) {
            try {
                // DB初期化
                await DataSet.InitializeAsync ();
                await TaskEx.DelayUntil (() => DataSet.IsReady);
                AppModeManager.SetMode (AppMode.Prices);
            }
            catch (Exception ex) {
                System.Diagnostics.Debug.WriteLine (ex);
            }
        }
    }

    /// <summary>認証状況を得る</summary>
    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; } = default!;

    /// <summary>認証済みID</summary>
    protected AuthedIdentity? Identity { get; set; }

    /// <summary>ユーザ識別子</summary>
    protected string UserIdentifier => Identity?.Identifier ?? "unknown";

    /// <summary>アプリモードが変化した</summary>
    protected void OnAppModePropertyChanged (object? sender, PropertyChangedEventArgs e) {
        InvokeAsync (StateHasChanged);
    }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync () {
        await base.OnInitializedAsync ();
        // 購読開始
        AppModeManager.PropertyChanged += OnAppModePropertyChanged;
        // 認証・認可
        Identity = await AuthState.GetIdentityAsync ();
    }

    /// <summary>購読終了</summary>
    public void Dispose () {
        AppModeManager.PropertyChanged -= OnAppModePropertyChanged;
    }
}
