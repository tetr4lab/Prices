@using System.Net
@using ComicsData

@page "/"

@implements IDisposable

@inject PricesDataSet DataSet
@inject HttpClient HttpClient
@inject IDialogService DialogService

<PageTitle>Prices Home</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">データベースに接続できませんでした。</MudAlert>
} else if (!DataSet.IsReady) {
    <MudStack Row Spacing="4">
        <MudProgressCircular Indeterminate="true" />
        <MudText Class="d-flex align-center gap-1" Typo="Typo.body1">データの読み込み中です。</MudText>
    </MudStack>
} else {
    <MudNavMenu>
        <NavBar />
    </MudNavMenu>
    <MudPaper Class="px-4 py-3" Elevation="2">
        <MudStack Row Spacing="4">
            @if (isDownloading) {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                <MudText Class="d-flex align-center gap-1" Typo="Typo.body2">データを更新中です。アプリを終了しないでください。</MudText>
            } else {
                <AuthorizeView Policy="Admin">
                    <Authorized>
                        <MudTooltip Text="@(SessionCounter.Count > 1 ? "複数の利用者がいる場合は使用できません。" : "")">
                            <MudButton Disabled="isDownloading || SessionCounter.Count > 1" OnClick="Update" StartIcon="@Icons.Material.Filled.CloudDownload" Variant="Variant.Outlined" Size="Size.Small">Get New Release</MudButton>
                        </MudTooltip>
                    </Authorized>
                </AuthorizeView>
                <MudText Class="d-flex align-center gap-1">
                    <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" />
                    @(DataSet?.Books?.ConvertAll (book => book.PublishDate).Min ()?.ToShortDateString ()) ~ @(DataSet?.Books?.ConvertAll (book => book.PublishDate).Max ()?.ToShortDateString ())
                </MudText>
                <MudText Class="d-flex align-center gap-1">
                        <MudIcon Icon="@Icons.Material.Filled.LibraryBooks" Size="Size.Small" />
                    @($"{DataSet?.Books?.Count:#,0}")
                </MudText>
                <MudText Class="d-flex align-center gap-1">
                    <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" />
                    @($"{DataSet?.Authors?.Count:#,0}")
                </MudText>
            }
        </MudStack>
    </MudPaper>
    <MudText Class="mt-2" Typo="Typo.body2" Color="Color.Success">@(DataSet.Valid ? "validated" : "")</MudText>
    <MudText Class="mt-2" Typo="Typo.body2">load time: @ElapsedTime ±@(PricesDataSet.WaitInterval)msec</MudText>

    <MudSimpleTable>
        @foreach (var price in DataSet.Prices) {
            var product = DataSet.Products.Find (i => i.Id == price.ProductId) ?? new ();
            var category = DataSet.Categories.Find(i => i.Id == product.CategoryId) ?? new ();
            var store = DataSet.Stores.Find (i => i.Id == price.StoreId) ?? new ();
            <tr>
                <td>@price.Id</td>
                <td>@category.Name</td>
                <td>@(product.Name)(@(price.ReferenceCount (DataSet)))</td>
                <td>@store.Name</td>
                <td>@price.PriceWithTax</td>
                <td>@(price.Quantity)@(product.Unit)</td>
                <td>@price.UnitPrice</td>
                <td>@price.Confirmed</td>
                <td>@price.Remarks</td>
            </tr>
        }
    </MudSimpleTable>
}

@code {

    /// <summary>データを取得する際の最低間隔</summary>
    protected static readonly TimeSpan AccessIntervalTime = new TimeSpan (0, 0, 3);

    /// <summary>翌月のデータ取得を解禁する日</summary>
    protected const int LateMonthDay = 25;

    /// <summary>検索文字列</summary>
    [CascadingParameter (Name = "Filter")] protected string? Filter { get; set; }

    /// <summary>セクションラベル設定</summary>
    [CascadingParameter (Name = "Section")] protected EventCallback<string> SetSectionTitle { get; set; }

    /// <summary>更新中の排他制御 兼 外部中断制御</summary>
    protected bool isDownloading;

    /// <summary>表示の更新と反映待ち</summary>
    protected async Task StateHasChangedAsync () {
        StateHasChanged ();
        await TaskEx.DelayOneFrame;
    }

    /// <summary>データ更新</summary>
    protected async void Update () {
        if (!isDownloading) {
            isDownloading = true;
            await StateHasChangedAsync ();
            await GetMissingsAsync();
            isDownloading = false;
            _ = DataSet.LoadAsync ();
            StateHasChanged ();
            await DataSet.LoadAsync ();
            StateHasChanged ();
        }
    }

    /// <summary>不足データの取得</summary>
    protected async Task GetMissingsAsync () {
        if (DataSet?.Books == null || DataSet?.Authors == null) { return; }
        // 不足データの検出
        var books = DataSet.Books;
        var now = DateTime.Now;
        var lastMonth = new DateTime (now.Year, now.Month + (now.Day < LateMonthDay ? 0 : 1), 1);
        var missings = new List<DateTime> ();
        for (var d = ComicsData.MostOldPublishDate; isDownloading && d <= lastMonth; d = d.AddMonths (1)) {
            if (!books.Exists (book => book.PublishDate?.Year == d.Year && book.PublishDate?.Month == d.Month)) {
                missings.Add (d);
            }
        }
        if (!isDownloading) { return; }
        // 確認
        var messages = new [] {
            missings.Count > 0 ? "以下のデータを更新します。" : "データは最新です。",
            missings.Count > 0 ? string.Join(", ", missings.ConvertAll (d => $"{d.Year:D4}/{d.Month:D2}")) : null,
        };
        var dialogResult = await DialogService.Confirmation (messages, width: missings.Count > 0 ? MaxWidth.Medium : MaxWidth.Small, cancellationLabel: missings.Count > 0 ? "Cancel" : "");
        if (missings.Count <= 0 || dialogResult == null || dialogResult.Canceled) { return; }
        // 取得の開始
        dialogResult = await DialogService.Progress(async update => {
            var lastTime = DateTime.MinValue;
            var done = new List<DateTime> ();
            var notFounds = new List<DateTime> ();
            var errors = new List<string> ();
            var count = 0;
            foreach (var date in missings) {
                var now = DateTime.Now;
                var elapsedTime = now - lastTime;
                if (elapsedTime < AccessIntervalTime) {
                    await Task.Delay (AccessIntervalTime - elapsedTime);
                }
                lastTime = now;
                var month = $"{date.Date.Year:D4}/{date.Date.Month:D2}";
                // 取得進行状況表示と中断受付
                var progressValue = count * 100 / missings.Count;
                var progressMessage = $"\"{month}\" {count:D4}/{missings.Count:D4}";
                var cancel = update (progressValue, [$"取得中 双方 {progressMessage}"]);
                if (cancel || !isDownloading) { break; }
                // 取得
                await using (var comics = new ComicsData (HttpClient, date)) {
                    // 取得完了を待つ
                    if (!await comics.LoadAsync () || comics.Count <= 0) {
                        // データが無いのでスキップ
                        notFounds.Add (date);
                        continue;
                    }
                    // 生成
                    // 登録のない著者名を検出して一覧
                    var names = new List<string> ();
                    var itemCount = 0;
                    foreach (Comic comic in comics) {
                        cancel = update (progressValue, [$"検出中 著者 {progressMessage} : {itemCount:D4}/{comics.Count:D4} {comic.ToString ().Ellipsis (40)}"]);
                        if (cancel || !isDownloading) { break; }
                        var newNames = comic.Authors.FindAll (name => 
                            !string.IsNullOrEmpty (name)
                            && !names.Contains (name)
                            && !DataSet.ExistsByName<Author, Book> (name)
                        );
                        names.AddRange (newNames);
                        itemCount++;
                    }
                    // 著者を一括生成・登録
                    if (names.Count > 0) {
                        update (progressValue, [$"保存中 著者 {progressMessage}"]);
                        var authors = names.ConvertAll (name => new Author { DataSet = this.DataSet, Name = name, });
                        var result = await DataSet.AddRangeAsync<Author, Book> (authors);
                        if (result.IsFailure) {
                            if (result.IsFatal) {
                                update (ProgressDialog.Acceptable, [$"{result.StatusName}が発生しました。時間をおいてやり直してみてください。"]);
                                break;
                            } else {
                                errors.Add ($"{month}:{result.StatusName}");
                            }
                        } else if (result.Value < authors.Count) {
                            errors.Add ($"{month}:登録できない著者({result.Value:N0}/{authors.Count:N0})");
                        }
                    }
                    // 書籍を生成
                    var books = new List<Book> ();
                    itemCount = 0;
                    foreach (Comic comic in comics) {
                        cancel = update (progressValue, [$"生成中 書籍 {progressMessage} : {itemCount:D4}/{comics.Count:D4} {comic.ToString ().Ellipsis (40)}"]);
                        if (cancel || !isDownloading) { break; }
                        if (!string.IsNullOrEmpty (comic.Title)) {
                            books.Add (new Book {
                                DataSet = this.DataSet,
                                Id = comic.Id,
                                Title = comic.Title,
                                PublishDate = comic.PublishDate,
                                Publisher = comic.Publisher,
                                Series = comic.Series,
                                Price = comic.Price,
                                RelatedIds = comic.Authors.ConvertAll (a => DataSet.GetItemByName<Author, Book> (a)?.Id ?? 0).FindAll (i => i > 0),
                            });
                        }
                        itemCount++;
                    }
                    // 書籍を一括登録
                    if (books.Count > 0) {
                        update (progressValue, [$"保存中 書籍 {progressMessage}"]);
                        var result = await DataSet.AddRangeAsync<Book, Author> (books);
                        if (result.Status == Status.DuplicateEntry) {
                            // 個別登録を試行
                            result = await DataSet.AddAsync<Book, Author> (books);
                        }
                        if (result.IsFailure) {
                            if (result.IsFatal) {
                                update (ProgressDialog.Acceptable, [$"{result.StatusName}が発生しました。時間をおいてやり直してみてください。"]);
                                break;
                            } else {
                                errors.Add ($"{month}:{result.StatusName}");
                            }
                        } else if (result.Value < books.Count) {
                            errors.Add ($"{month}:登録できない書籍({result.Value:N0}/{books.Count:N0})");
                        } else {
                            done.Add (date);
                        }
                    }
                }
                count++;
            }
            update (ProgressDialog.Acceptable, [
                $"更新を{(count < missings.Count ? "中断" : "完了")}しました。",
                count < missings.Count ? $"以下のデータを取得しました。" : null,
                count < missings.Count ? string.Join (',', done.ConvertAll (d => $"{d.Year:D4}/{d.Month:D2}")) : null,
                notFounds.Count > 0 ? $"ただし、「{string.Join (',', notFounds.ConvertAll (d => $"{d.Year:D4}/{d.Month:D2}"))}」は見つかりませんでした。" : null,
                errors.Count > 0 ? $"以下、{errors.Count:N0}件のエラーがありました。" : null,
                errors.Count > 0 ? string.Join (',', errors) : null,
           ]);
        }, title: "更新中", message: "データを更新中です。アプリを終了しないでください。", cancellationLabel: "Stop", maxWidth: MaxWidth.Medium);
    }

    /// <summary>初期化</summary>
    protected override async Task OnInitializedAsync () {
        await base.OnInitializedAsync ();
        await SetSectionTitle.InvokeAsync ("Prices");
        // セッション数の変化を購読
        SessionCounter.Subscribe (this, () => InvokeAsync (StateHasChanged));
    }

    /// <summary>破棄</summary>
    public void Dispose () {
        SessionCounter.Unsubscribe (this);
        // ページ遷移に伴う更新キャンセル
        isDownloading = false;
    }

    /// <summary>描画後処理</summary>
    protected override async void OnAfterRender (bool firstRender) {
        base.OnAfterRender (firstRender);
        if (firstRender) {
            // 遅延読み込み
            var startTime = DateTime.Now;
            await DataSet.InitializeAsync ();
            var endTime = DateTime.Now;
            ElapsedTime = endTime - startTime;
            StateHasChanged ();
        }
    }
    protected TimeSpan ElapsedTime { get; set; }

}
